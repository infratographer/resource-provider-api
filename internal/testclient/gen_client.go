// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package testclient

import (
	"context"
	"net/http"
	"time"

	"github.com/Yamashou/gqlgenc/client"
	"go.infratographer.com/x/gidx"
)

type TestClient interface {
	GetResourceProvider(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetResourceProvider, error)
	ListResourceProviders(ctx context.Context, id gidx.PrefixedID, orderBy *ResourceProviderOrder, httpRequestOptions ...client.HTTPRequestOption) (*ListResourceProviders, error)
	ResourceProviderCreate(ctx context.Context, input CreateResourceProviderInput, httpRequestOptions ...client.HTTPRequestOption) (*ResourceProviderCreate, error)
	ResourceProviderDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*ResourceProviderDelete, error)
	ResourceProviderUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateResourceProviderInput, httpRequestOptions ...client.HTTPRequestOption) (*ResourceProviderUpdate, error)
}

type Client struct {
	Client *client.Client
}

func NewClient(cli *http.Client, baseURL string, options ...client.HTTPRequestOption) TestClient {
	return &Client{Client: client.NewClient(cli, baseURL, options...)}
}

type Query struct {
	ResourceProvider ResourceProvider "json:\"resourceProvider\" graphql:\"resourceProvider\""
	Entities         []Entity         "json:\"_entities\" graphql:\"_entities\""
	Service          Service          "json:\"_service\" graphql:\"_service\""
}
type Mutation struct {
	ResourceProviderCreate ResourceProviderCreatePayload "json:\"resourceProviderCreate\" graphql:\"resourceProviderCreate\""
	ResourceProviderUpdate ResourceProviderUpdatePayload "json:\"resourceProviderUpdate\" graphql:\"resourceProviderUpdate\""
	ResourceProviderDelete ResourceProviderDeletePayload "json:\"resourceProviderDelete\" graphql:\"resourceProviderDelete\""
}
type GetResourceProvider struct {
	ResourceProvider struct {
		ID                 gidx.PrefixedID "json:\"id\" graphql:\"id\""
		Name               string          "json:\"name\" graphql:\"name\""
		Description        *string         "json:\"description\" graphql:\"description\""
		OrganizationalUnit struct {
			ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
		} "json:\"organizationalUnit\" graphql:\"organizationalUnit\""
		CreatedAt time.Time "json:\"createdAt\" graphql:\"createdAt\""
		UpdatedAt time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
	} "json:\"resourceProvider\" graphql:\"resourceProvider\""
}
type ListResourceProviders struct {
	Entities []*struct {
		ResourceProvider struct {
			Edges []*struct {
				Node *struct {
					ID   gidx.PrefixedID "json:\"id\" graphql:\"id\""
					Name string          "json:\"name\" graphql:\"name\""
				} "json:\"node\" graphql:\"node\""
			} "json:\"edges\" graphql:\"edges\""
		} "json:\"resourceProvider\" graphql:\"resourceProvider\""
	} "json:\"_entities\" graphql:\"_entities\""
}
type ResourceProviderCreate struct {
	ResourceProviderCreate struct {
		ResourceProvider struct {
			ID                 gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Name               string          "json:\"name\" graphql:\"name\""
			Description        *string         "json:\"description\" graphql:\"description\""
			OrganizationalUnit struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"organizationalUnit\" graphql:\"organizationalUnit\""
			CreatedAt time.Time "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
		} "json:\"resourceProvider\" graphql:\"resourceProvider\""
	} "json:\"resourceProviderCreate\" graphql:\"resourceProviderCreate\""
}
type ResourceProviderDelete struct {
	ResourceProviderDelete struct {
		DeletedID gidx.PrefixedID "json:\"deletedID\" graphql:\"deletedID\""
	} "json:\"resourceProviderDelete\" graphql:\"resourceProviderDelete\""
}
type ResourceProviderUpdate struct {
	ResourceProviderUpdate struct {
		ResourceProvider struct {
			ID                 gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Name               string          "json:\"name\" graphql:\"name\""
			Description        *string         "json:\"description\" graphql:\"description\""
			OrganizationalUnit struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"organizationalUnit\" graphql:\"organizationalUnit\""
			CreatedAt time.Time "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
		} "json:\"resourceProvider\" graphql:\"resourceProvider\""
	} "json:\"resourceProviderUpdate\" graphql:\"resourceProviderUpdate\""
}

const GetResourceProviderDocument = `query GetResourceProvider ($id: ID!) {
	resourceProvider(id: $id) {
		id
		name
		description
		organizationalUnit {
			id
		}
		createdAt
		updatedAt
	}
}
`

func (c *Client) GetResourceProvider(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetResourceProvider, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res GetResourceProvider
	if err := c.Client.Post(ctx, "GetResourceProvider", GetResourceProviderDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ListResourceProvidersDocument = `query ListResourceProviders ($id: ID!, $orderBy: ResourceProviderOrder) {
	_entities(representations: [{__typename:"OrganizationalUnit",id:$id}]) {
		... on OrganizationalUnit {
			resourceProvider(orderBy: $orderBy) {
				edges {
					node {
						id
						name
					}
				}
			}
		}
	}
}
`

func (c *Client) ListResourceProviders(ctx context.Context, id gidx.PrefixedID, orderBy *ResourceProviderOrder, httpRequestOptions ...client.HTTPRequestOption) (*ListResourceProviders, error) {
	vars := map[string]interface{}{
		"id":      id,
		"orderBy": orderBy,
	}

	var res ListResourceProviders
	if err := c.Client.Post(ctx, "ListResourceProviders", ListResourceProvidersDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ResourceProviderCreateDocument = `mutation ResourceProviderCreate ($input: CreateResourceProviderInput!) {
	resourceProviderCreate(input: $input) {
		resourceProvider {
			id
			name
			description
			organizationalUnit {
				id
			}
			createdAt
			updatedAt
		}
	}
}
`

func (c *Client) ResourceProviderCreate(ctx context.Context, input CreateResourceProviderInput, httpRequestOptions ...client.HTTPRequestOption) (*ResourceProviderCreate, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res ResourceProviderCreate
	if err := c.Client.Post(ctx, "ResourceProviderCreate", ResourceProviderCreateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ResourceProviderDeleteDocument = `mutation ResourceProviderDelete ($id: ID!) {
	resourceProviderDelete(id: $id) {
		deletedID
	}
}
`

func (c *Client) ResourceProviderDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*ResourceProviderDelete, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res ResourceProviderDelete
	if err := c.Client.Post(ctx, "ResourceProviderDelete", ResourceProviderDeleteDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ResourceProviderUpdateDocument = `mutation ResourceProviderUpdate ($id: ID!, $input: UpdateResourceProviderInput!) {
	resourceProviderUpdate(id: $id, input: $input) {
		resourceProvider {
			id
			name
			description
			organizationalUnit {
				id
			}
			createdAt
			updatedAt
		}
	}
}
`

func (c *Client) ResourceProviderUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateResourceProviderInput, httpRequestOptions ...client.HTTPRequestOption) (*ResourceProviderUpdate, error) {
	vars := map[string]interface{}{
		"id":    id,
		"input": input,
	}

	var res ResourceProviderUpdate
	if err := c.Client.Post(ctx, "ResourceProviderUpdate", ResourceProviderUpdateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}
