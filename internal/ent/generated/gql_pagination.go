// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"go.infratographer.com/resource-provider-api/internal/ent/generated/resourceprovider"
	"go.infratographer.com/x/gidx"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[gidx.PrefixedID]
	PageInfo       = entgql.PageInfo[gidx.PrefixedID]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// ResourceProviderEdge is the edge representation of ResourceProvider.
type ResourceProviderEdge struct {
	Node   *ResourceProvider `json:"node"`
	Cursor Cursor            `json:"cursor"`
}

// ResourceProviderConnection is the connection containing edges to ResourceProvider.
type ResourceProviderConnection struct {
	Edges      []*ResourceProviderEdge `json:"edges"`
	PageInfo   PageInfo                `json:"pageInfo"`
	TotalCount int                     `json:"totalCount"`
}

func (c *ResourceProviderConnection) build(nodes []*ResourceProvider, pager *resourceproviderPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ResourceProvider
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ResourceProvider {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ResourceProvider {
			return nodes[i]
		}
	}
	c.Edges = make([]*ResourceProviderEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ResourceProviderEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ResourceProviderPaginateOption enables pagination customization.
type ResourceProviderPaginateOption func(*resourceproviderPager) error

// WithResourceProviderOrder configures pagination ordering.
func WithResourceProviderOrder(order *ResourceProviderOrder) ResourceProviderPaginateOption {
	if order == nil {
		order = DefaultResourceProviderOrder
	}
	o := *order
	return func(pager *resourceproviderPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultResourceProviderOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithResourceProviderFilter configures pagination filter.
func WithResourceProviderFilter(filter func(*ResourceProviderQuery) (*ResourceProviderQuery, error)) ResourceProviderPaginateOption {
	return func(pager *resourceproviderPager) error {
		if filter == nil {
			return errors.New("ResourceProviderQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type resourceproviderPager struct {
	reverse bool
	order   *ResourceProviderOrder
	filter  func(*ResourceProviderQuery) (*ResourceProviderQuery, error)
}

func newResourceProviderPager(opts []ResourceProviderPaginateOption, reverse bool) (*resourceproviderPager, error) {
	pager := &resourceproviderPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultResourceProviderOrder
	}
	return pager, nil
}

func (p *resourceproviderPager) applyFilter(query *ResourceProviderQuery) (*ResourceProviderQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *resourceproviderPager) toCursor(rp *ResourceProvider) Cursor {
	return p.order.Field.toCursor(rp)
}

func (p *resourceproviderPager) applyCursors(query *ResourceProviderQuery, after, before *Cursor) (*ResourceProviderQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultResourceProviderOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *resourceproviderPager) applyOrder(query *ResourceProviderQuery) *ResourceProviderQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultResourceProviderOrder.Field {
		query = query.Order(DefaultResourceProviderOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *resourceproviderPager) orderExpr(query *ResourceProviderQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultResourceProviderOrder.Field {
			b.Comma().Ident(DefaultResourceProviderOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ResourceProvider.
func (rp *ResourceProviderQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ResourceProviderPaginateOption,
) (*ResourceProviderConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newResourceProviderPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if rp, err = pager.applyFilter(rp); err != nil {
		return nil, err
	}
	conn := &ResourceProviderConnection{Edges: []*ResourceProviderEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = rp.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if rp, err = pager.applyCursors(rp, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		rp.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := rp.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	rp = pager.applyOrder(rp)
	nodes, err := rp.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ResourceProviderOrderFieldID orders ResourceProvider by id.
	ResourceProviderOrderFieldID = &ResourceProviderOrderField{
		Value: func(rp *ResourceProvider) (ent.Value, error) {
			return rp.ID, nil
		},
		column: resourceprovider.FieldID,
		toTerm: resourceprovider.ByID,
		toCursor: func(rp *ResourceProvider) Cursor {
			return Cursor{
				ID:    rp.ID,
				Value: rp.ID,
			}
		},
	}
	// ResourceProviderOrderFieldCreatedAt orders ResourceProvider by created_at.
	ResourceProviderOrderFieldCreatedAt = &ResourceProviderOrderField{
		Value: func(rp *ResourceProvider) (ent.Value, error) {
			return rp.CreatedAt, nil
		},
		column: resourceprovider.FieldCreatedAt,
		toTerm: resourceprovider.ByCreatedAt,
		toCursor: func(rp *ResourceProvider) Cursor {
			return Cursor{
				ID:    rp.ID,
				Value: rp.CreatedAt,
			}
		},
	}
	// ResourceProviderOrderFieldUpdatedAt orders ResourceProvider by updated_at.
	ResourceProviderOrderFieldUpdatedAt = &ResourceProviderOrderField{
		Value: func(rp *ResourceProvider) (ent.Value, error) {
			return rp.UpdatedAt, nil
		},
		column: resourceprovider.FieldUpdatedAt,
		toTerm: resourceprovider.ByUpdatedAt,
		toCursor: func(rp *ResourceProvider) Cursor {
			return Cursor{
				ID:    rp.ID,
				Value: rp.UpdatedAt,
			}
		},
	}
	// ResourceProviderOrderFieldName orders ResourceProvider by name.
	ResourceProviderOrderFieldName = &ResourceProviderOrderField{
		Value: func(rp *ResourceProvider) (ent.Value, error) {
			return rp.Name, nil
		},
		column: resourceprovider.FieldName,
		toTerm: resourceprovider.ByName,
		toCursor: func(rp *ResourceProvider) Cursor {
			return Cursor{
				ID:    rp.ID,
				Value: rp.Name,
			}
		},
	}
	// ResourceProviderOrderFieldDescription orders ResourceProvider by description.
	ResourceProviderOrderFieldDescription = &ResourceProviderOrderField{
		Value: func(rp *ResourceProvider) (ent.Value, error) {
			return rp.Description, nil
		},
		column: resourceprovider.FieldDescription,
		toTerm: resourceprovider.ByDescription,
		toCursor: func(rp *ResourceProvider) Cursor {
			return Cursor{
				ID:    rp.ID,
				Value: rp.Description,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ResourceProviderOrderField) String() string {
	var str string
	switch f.column {
	case ResourceProviderOrderFieldID.column:
		str = "ID"
	case ResourceProviderOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case ResourceProviderOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case ResourceProviderOrderFieldName.column:
		str = "NAME"
	case ResourceProviderOrderFieldDescription.column:
		str = "DESCRIPTION"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ResourceProviderOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ResourceProviderOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ResourceProviderOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *ResourceProviderOrderFieldID
	case "CREATED_AT":
		*f = *ResourceProviderOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *ResourceProviderOrderFieldUpdatedAt
	case "NAME":
		*f = *ResourceProviderOrderFieldName
	case "DESCRIPTION":
		*f = *ResourceProviderOrderFieldDescription
	default:
		return fmt.Errorf("%s is not a valid ResourceProviderOrderField", str)
	}
	return nil
}

// ResourceProviderOrderField defines the ordering field of ResourceProvider.
type ResourceProviderOrderField struct {
	// Value extracts the ordering value from the given ResourceProvider.
	Value    func(*ResourceProvider) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) resourceprovider.OrderOption
	toCursor func(*ResourceProvider) Cursor
}

// ResourceProviderOrder defines the ordering of ResourceProvider.
type ResourceProviderOrder struct {
	Direction OrderDirection              `json:"direction"`
	Field     *ResourceProviderOrderField `json:"field"`
}

// DefaultResourceProviderOrder is the default ordering of ResourceProvider.
var DefaultResourceProviderOrder = &ResourceProviderOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ResourceProviderOrderField{
		Value: func(rp *ResourceProvider) (ent.Value, error) {
			return rp.ID, nil
		},
		column: resourceprovider.FieldID,
		toTerm: resourceprovider.ByID,
		toCursor: func(rp *ResourceProvider) Cursor {
			return Cursor{ID: rp.ID}
		},
	},
}

// ToEdge converts ResourceProvider into ResourceProviderEdge.
func (rp *ResourceProvider) ToEdge(order *ResourceProviderOrder) *ResourceProviderEdge {
	if order == nil {
		order = DefaultResourceProviderOrder
	}
	return &ResourceProviderEdge{
		Node:   rp,
		Cursor: order.Field.toCursor(rp),
	}
}
